#!/bin/python3

# spec_gui
#
# Tom Trebisky  2-18-2025
#
# A Python program to talk to the
# B and W Tech Model BTC100-S spectrometer.
# a GUI program derived from "spec"

import wx
import os
import sys

from Spectro import *

#My most mature wx code is:
#/u1/Projects/ESP8266/Projects/tmon/gui

# Geometry for initial layout
xsize = 800
ysize = 600

# The right side needs about 250 pixels
right_size =250
split_pos = xsize - right_size

# The left panel has the graph
#
# The way all of this works is that Paint events put stuff
# into the panel.  So you set up data to be plotted, then
# call self.Refresh, and a Paint event will happen and something
# should show up on the screen.
class Left_Panel ( wx.Panel ) :
        def __init__ ( self, parent, data ) :
            wx.Panel.__init__ ( self, parent )

            self.width = None
            self.height = None
            self.xy = None

            self.data = data

            self.Bind ( wx.EVT_SIZE, self.onResize )
            self.Bind ( wx.EVT_PAINT, self.OnPaint )

        # We get 3 resize events just starting up.
        # we need this to refresh after resize
        # also to post width for Move checks
        def onResize ( self, event ) :
            #print ( "resize" )
            self.width = event.Size.width
            self.height = event.Size.height

            #xsize = self.width-self.lmargin
            #ysize = self.height - self.ymargin * 2
            #self.data.viewport ( self.lmargin, self.ymargin, xsize, ysize )

            xsize = self.width
            ysize = self.height
            self.data.viewport ( 0, 0, xsize, ysize )

            print ( "width, height", self.width, "", self.height )

            self.update ();

        # So that we can handle paint events quickly,
        # we have a prescaled set of points made up
        # ahead of time
        def plot_em ( self ) :
            if not self.xy :
                return

            dc = wx.PaintDC ( self )
            dc.SetPen ( wx.Pen(wx.BLUE, 2) )

            lastxy = None

            for xy in self.xy :
                if xy and lastxy :
                    dc.DrawLine ( lastxy[0], lastxy[1], xy[0], xy[1] )
                lastxy = xy

        # We get lots of paint events, for reasons I don't understand,
        # and not simply related to cursor motion.
        # It is out of my control and it all works.
        # We just need to be ready to entirely redraw everything
        # whenever one of these events transpires.
        def OnPaint ( self, event ) :
            #print ( "left Paint!" )

            dc = wx.PaintDC ( self )
            dc.Clear ()

            # We get black by default
            dc.SetPen ( wx.Pen(wx.BLUE, 4) )

            #if ( self.curpos ) :
            #    self.mkVline ( self.curpos )

            #w, h = self.GetSize()

            # self.mkVline ( self.lmargin )

            #dc.DrawLine ( lastxy[0], lastxy[1], xy[0], xy[1] )
            #dc.DrawLine ( 100, 100, 200, 200 )

            #self.mtext ( 0, "140" )
            #self.mtext ( 100, "140" )
            #self.mtext ( 150, "140" )
            #self.mtext ( 250, "140" )
            # This is 164x19 pixels with a size 12 font
            #self.mtext ( 300, "Marvin the Alligator" )
            #self.mtext ( h-30, "140" )
            #dc.DrawText ( "Alligator", 50, 50 )

            self.plot_em ()

            #for (ii,ll) in self.ticks :
            #    self.mtext ( ii, ll )

            #self.mkHline ( self.height-1 )
            #for ix in self.xticks :
            #    self.xtick ( ix )

        def mkdata ( self ) :
            rv = []

            rv.append ( (100,300) )
            rv.append ( (200,350) )
            rv.append ( (300,250) )
            rv.append ( (400,380) )
            self.xy = rv

        # This gets called when we have data fresh
        # from the spectrometer
        def new_data ( self, vals ) :
            self.data.update ( vals )
            self.xy = self.data.get_xy ()
            #print ( "XY has points: ", len(self.xy) )
            #print ( self.xy[0] )
            #print ( self.xy[2000] )
            self.update ()

        def update ( self ) :
            #print ( "update Left" )
            # trigger a repaint
            self.Refresh ()


class Spec_Data () :
        def __init__ ( self ) :
            self.raw = None
            self.autoscale = True
            self.max16 = 65536

        def auto ( self ) :
            self.autoscale = True

        def fixed ( self ) :
            self.autoscale = False

        def minmax ( self ) :
            min = self.raw[0]
            max = self.raw[0]
            for v in self.raw :
                if v < min :
                    min = v
                if v > max :
                    max = v
            self.min = min
            self.max = max

        # New data arrived
        def update ( self, vals ) :
            self.raw = vals
            self.minmax ()
            print ( "New data: min, max = ", self.min, " ", self.max )

        def get_xy ( self ) :
            rv = []
            index = 0
            num = len(self.raw)
            ywid = self.max - self.min
            for v in self.raw :
                x = int ( (index * self.xsize) / num )
                #y = int ( ((v - self.min) * self.ysize) / ywid )
                if self.autoscale :
                    y = int ( ((self.max - v) * self.ysize) / ywid )
                else :
                    y = int ( ((self.max16 - v) * self.ysize) / self.max16 )
                rv.append ( (x,y) )
                index += 1
            return rv

        # Called by resize events
        # This is how I keep this object informed
        # about things the left panel knows about
        def viewport ( self, xoff, yoff, xsize, ysize ) :
            self.xoff = xoff
            self.yoff = yoff
            self.xsize = xsize
            self.ysize = ysize

# The right panel has controls
class Right_Panel ( wx.Panel ) :
        def __init__ ( self, parent, data, left ) :
            wx.Panel.__init__ ( self, parent )

            self.data = data
            self.left = left

            self.spec = self.initSpectrometer ()

            sz_main = wx.BoxSizer ( wx.VERTICAL )
            self.SetSizer ( sz_main )

            # ------------------------------
            self.data.auto ()
            # on/off switch for auto.
            # a Radio button will do for now, but I would much
            # prefer a slider switch
            p_auto = wx.Panel ( self, -1 )

            # This yields a simple button that turns "grey" when on.
            # Too subtle for my taste
            #b_auto = wx.ToggleButton ( self, wx.ID_ANY, "Auto" )
            #sz_main.Add ( b_auto, 1, wx.EXPAND )

            b_auto1 = wx.RadioButton ( p_auto, 1, label="Auto" )
            b_auto2 = wx.RadioButton ( p_auto, 2, label="Fixed" )

            sz_auto = wx.BoxSizer ( wx.HORIZONTAL )
            sz_auto.Add ( b_auto1, 1, wx.EXPAND )
            sz_auto.Add ( b_auto2, 1, wx.EXPAND )
            p_auto.SetSizer ( sz_auto )

            sz_main.Add ( p_auto, 1, wx.EXPAND )

            self.Bind ( wx.EVT_RADIOBUTTON, self.onRadio )

            # ------------------------------
            # place to enter integration time
            p_integ = wx.Panel ( self, -1 )

            val = self.spec.get_integ ()
            lab = f"Gain: {val}   "
            self.integ_label = wx.StaticText ( p_integ, label=lab )
            self.integ_edit= wx.TextCtrl ( p_integ, size=(140, -1))
            but = wx.Button ( p_integ, label="Set")
            but.Bind ( wx.EVT_BUTTON, self.onInteg )

            sz_integ = wx.BoxSizer ( wx.HORIZONTAL )
            sz_integ.Add ( self.integ_label, 1, wx.EXPAND )
            sz_integ.Add ( self.integ_edit, 1, wx.EXPAND )
            sz_integ.Add ( but, 1, wx.EXPAND )
            p_integ.SetSizer ( sz_integ )

            sz_main.Add ( p_integ, 1, wx.EXPAND )

            # ------------------------------
            # Add main control buttons
            # These may eventually move to a top menu
            # especially Exit
            p_ctrl = wx.Panel ( self, -1 )
            self.b_up = wx.Button ( p_ctrl, wx.ID_ANY, "Update")
            self.b_up.Bind ( wx.EVT_BUTTON, self.onUpdate )

            self.b_rd = wx.Button ( p_ctrl, wx.ID_ANY, "Read")
            self.b_rd.Bind ( wx.EVT_BUTTON, self.onRead )

            self.b_ex = wx.Button ( p_ctrl, wx.ID_ANY, "Exit")
            self.b_ex.Bind ( wx.EVT_BUTTON, self.onExit )

            sz_ctrl = wx.BoxSizer ( wx.HORIZONTAL )
            sz_ctrl.Add ( self.b_up, 1, wx.EXPAND )
            sz_ctrl.Add ( self.b_rd, 1, wx.EXPAND )
            sz_ctrl.Add ( self.b_ex, 1, wx.EXPAND )
            p_ctrl.SetSizer ( sz_ctrl )

            sz_main.Add ( p_ctrl, 1, wx.EXPAND )

        # on Windows 10, os.name returns "nt".
        #   on Linux it returns "posix"
        # on Windows 10, sys.platform returns "win32".
        #   on Linux it returns "linux"
        #print ( os.name )
        #print ( sys.platform )
        def initSpectrometer ( self ) :
            print ( "init spectrometer" )

            if ( sys.platform == "linux" ) :
                spec_device = "/dev/ttyUSB0"
            else :
                spec_device = "COM3"

            return Spectro ( spec_device )

        # Button click to set integration time
        def onInteg ( self, event ) :
            val = self.integ_edit.GetValue ()
            lab = f"Gain: {val}"
            self.integ_label.SetLabel ( lab )
            self.spec.set_integ ( int(val) )

        def onRadio ( self, event ) :
            rb = event.GetEventObject ()
            lab = rb.GetLabel ()
            print ( "Radio EVENT ****************** ", lab )
            #val = rb.GetValue ()    # is always true
            if lab.startswith ( 'Au' ) :
                self.data.auto ()
            else :
                self.data.fixed ()

        def onExit ( self, event ) :
            print ( "Time for me to exit" )
            self.spec.finish ()
            sys.exit ()

        def new_scan ( self ) :
            #self.spec.average ( 10 )
            #self.spec.average ( 1 )
            self.spec.average ( 2 )
            vals = self.spec.bscan ()
            if len(vals) == 2048 :
                self.left.new_data ( vals )
            else :
                print ( "Scan yielded : ", len(vals), " values" )
                print ( "Graph update skipped" )

        def onRead ( self, event ) :
            #print ( "Time for me to read" )
            self.new_scan ()

        # Basically useless now
        def onUpdate ( self, event ) :
            print ( "Update button was pushed" )
            #self.left.mkdata ()
            self.update ()
            self.left.update ()

        def update ( self ) :
            print ( "update Right" )

# The timer goes off once per second
timer_delay = 1000    # milliseconds

class Spec_Frame ( wx.Frame ) :

        def __init__ ( self, parent, title ):
            wsize = ( xsize, ysize )
            top = wx.Frame.__init__(self, None, wx.ID_ANY, title, size=wsize )

            splitter = wx.SplitterWindow(self, style = wx.SP_LIVE_UPDATE)

            self.data = Spec_Data ()

            self.lpanel = Left_Panel ( splitter, self.data )
            self.rpanel = Right_Panel ( splitter, self.data, self.lpanel )

            # only left side grows
            splitter.SetSashGravity ( 1.0 )

            splitter.SetMinimumPaneSize ( right_size )
            splitter.SplitVertically ( self.lpanel, self.rpanel )
            splitter.SetSashPosition ( split_pos, True )

            self.timer = wx.Timer ( self )
            self.Bind ( wx.EVT_TIMER, self.timer_update, self.timer )
            self.timer.Start ( timer_delay )

        # Called at 1 Hz
        def timer_update ( self, event ) :
            #print ( "Tick" )
            self.rpanel.new_scan ()


class Spec_GUI ( wx.App ) :
        def __init__ ( self ) :
            wx.App.__init__(self)
            #frame = Spec_Frame ( self, "BTC-100-S2 control" )
            frame = Spec_Frame ( self, "BTC-100-S2 Whiz-Bang" )
            self.SetTopWindow ( frame )
            frame.Show ( True )

# ===============================================================================
# ===============================================================================

app = Spec_GUI ()
app.MainLoop ()

# THE END
